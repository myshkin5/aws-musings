AWSTemplateFormatVersion: 2010-09-09

Description: Artifacts to supporting private applications in containers.

Parameters:
  ContainersPrivateSubnetACIDRBlock:
    Type: String
    Description: The CIDR block of the private A subnet for containers.
    Default: 10.0.50.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  ContainersPrivateSubnetBCIDRBlock:
    Type: String
    Description: The CIDR block of the private B subnet for containers.
    Default: 10.0.51.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  ContainersPrivateSubnetCCIDRBlock:
    Type: String
    Description: The CIDR block of the private C subnet for containers.
    Default: 10.0.52.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  ContainersPrivateSubnetAIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the private A subnet. Optional.
  ContainersPrivateSubnetBIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the private B subnet. Optional.
  ContainersPrivateSubnetCIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the private C subnet. Optional.
  NetworkACLId:
    Type: String
    Description: The id of the network access control list used to protect instances in this project.
  PrivateRouteTableId:
    Type: String
    Description: The id of the private route table associated with the project's private subnets.
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the VPC in which the resources will be created.

Conditions:
  AddIPv6SubnetA: !Not [ !Equals [ !Ref ContainersPrivateSubnetAIPv6CIDRBlock, "" ] ]
  AddIPv6SubnetB: !Not [ !Equals [ !Ref ContainersPrivateSubnetBIPv6CIDRBlock, "" ] ]
  AddIPv6SubnetC: !Not [ !Equals [ !Ref ContainersPrivateSubnetCIPv6CIDRBlock, "" ] ]
  AddAnyIPv6: !Or [ Condition: AddIPv6SubnetA, Condition: AddIPv6SubnetB, Condition: AddIPv6SubnetC ]

Resources:
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ContainersPrivateSubnetACIDRBlock
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetA, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetA, !Ref ContainersPrivateSubnetAIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-a-private-subnet"
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ContainersPrivateSubnetBCIDRBlock
      AvailabilityZone: !Select [ "1", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetB, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetB, !Ref ContainersPrivateSubnetBIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-b-private-subnet"
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ContainersPrivateSubnetCCIDRBlock
      AvailabilityZone: !Select [ "2", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetC, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetC, !Ref ContainersPrivateSubnetCIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-c-private-subnet"

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableId
      SubnetId: !Ref PrivateSubnetC

  PrivateSubnetANetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACLId
      SubnetId: !Ref PrivateSubnetA
  PrivateSubnetBNetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACLId
      SubnetId: !Ref PrivateSubnetB
  PrivateSubnetCNetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACLId
      SubnetId: !Ref PrivateSubnetC

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Application Load Balancer security group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-alb-sg"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIpv6: ::/0

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # Shortened name as only 32 characters is supported
      Name: private-alb
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnetA
        - !Ref PrivateSubnetB
        - !Ref PrivateSubnetC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-alb"

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      # Shortened name as only 32 characters is supported
      Name: private-default-target-group
      VpcId: !Ref VPCId
      Port: 80
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-default-target-group"

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

Outputs:
  ContainersPrivateSubnetAId:
    Description: The id of the containers private subnet A.
    Value: !Ref PrivateSubnetA
  ContainersPrivateSubnetBId:
    Description: The id of the containers private subnet B.
    Value: !Ref PrivateSubnetB
  ContainersPrivateSubnetCId:
    Description: The id of the containers private subnet C.
    Value: !Ref PrivateSubnetC
  PrivateLoadBalancerDNSName:
    Description: The DNS name of the private load balancer for use in alias record sets.
    Value: !GetAtt LoadBalancer.DNSName
  PrivateLoadBalancerCanonicalHostedZoneId:
    Description: The hosted zone id of the private load balancer for use in alias record sets.
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  PrivateLoadBalancerListenerARN:
    Description: The ARN of the private load balancer listener.
    Value: !Ref LoadBalancerListener
