---
  AWSTemplateFormatVersion: 2010-09-09

  Description: The bosh-init inception server.

  Parameters:
    AWSAccessKeyId:
      Type: String
      Description: The access key id used by the bosh AWS CPI to access AWS.
    AWSMusingsS3URL:
      Type: String
      Description: S3 path to aws-musings.
    AWSSecretAccessKey:
      Type: String
      NoEcho: true
      Description: The secret access key used by the bosh AWS CPI to access AWS.
    BOSHDirectorSecurityGroupId:
      Type: AWS::EC2::SecurityGroup::Id
      Description: The id of the bosh director security group.
    DNSZone:
      Type: String
      Description: The DNS zone name of the VPC (should not end in 'vpc', used in naming the instance).
      AllowedPattern: "[a-z0-9\\-]*"
      ConstraintDescription: must contain only lowercase letters, numbers and dashes
    FullyQualifiedInternalParentDNSZone:
      Type: String
      Description: The internal parent DNS zone (should not start or end with .).
      AllowedPattern: "[a-z][a-z0-9\\-.]*[a-z0-9]"
      ConstraintDescription: must contain only lowercase letters, numbers, dashes and dots
    InternalKeyName:
      Type: AWS::EC2::KeyPair::KeyName
      Description: SSH key name used to connect with internal servers.
    ManagementSubnetId:
      Type: AWS::EC2::Subnet::Id
      Description: The id of the bosh management subnet.
    ManagementThreeOctetCIDRBlock:
      Type: String
      Description: The first 24 bits of the first CIDR block for the management subnet.
      AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})"
      ConstraintDescription: must be the first three digits of a valid IP CIDR of the form x.x.x
    PrivateKey:
      Type: String
      NoEcho: true
      Description: The private SSH key used by bosh to connect to instances it creates.
    StackPrefix:
      Type: String
      Description: The root name of the stack (prior to -bosh-init being appended).
    VPCId:
      Type: AWS::EC2::VPC::Id
      Description: The id of the VPC in which the resources will be created.

  Mappings:
    AMIRegionMap:
      us-east-1: { standard: ami-6edd3078 }
      us-west-2: { standard: ami-7c803d1c }

  Resources:
    BOSHInitSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: MicroBOSH server security group
        VpcId: !Ref VPCId
        Tags:
        - Key: Name
          Value: !Join [ -, [ !Ref "AWS::StackName", server-sg ] ]
        SecurityGroupIngress:
        - IpProtocol: -1
          CidrIp: 10.0.0.0/8
        SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

    BOSHInitInstance:
      Type: AWS::EC2::Instance
      Metadata:
        "AWS::CloudFormation::Init":
          config:
            files:
              /etc/cfn/cfn-hup.conf:
                source: !Join [ /, [ !Ref AWSMusingsS3URL, common/cfn-hup.conf ] ]
                context:
                  STACK_ID: !Ref "AWS::StackId"
                  REGION: !Ref "AWS::Region"
                mode: 000400
                owner: root
                group: root
              /etc/cfn/hooks.d/cfn-auto-reloader.conf:
                source: !Join [ /, [ !Ref AWSMusingsS3URL, common/cfn-auto-reloader.conf ] ]
                context:
                  STACK_ID: !Ref "AWS::StackId"
                  REGION: !Ref "AWS::Region"
                  INSTANCE_NAME: BOSHInitInstance

              /etc/dhcp/dhclient.conf:
                source: !Join [ /, [ !Ref AWSMusingsS3URL, common/dhclient.conf ] ]
                context:
                  FQDN: !Join [ "", [ bosh-init., !Ref DNSZone, ., !Ref FullyQualifiedInternalParentDNSZone ] ]
      Properties:
        DisableApiTermination: false
        ImageId: !FindInMap [ AMIRegionMap, !Ref "AWS::Region", standard ]
        InstanceType: t2.nano
        KeyName: !Ref InternalKeyName
        Monitoring: false
        Tags:
        - Key: Name
          Value: !Join [ -, [ !Ref DNSZone, bosh-init ] ]
        PrivateIpAddress: !Join [ ., [ !Ref ManagementThreeOctetCIDRBlock, 10 ] ]
        SubnetId: !Ref ManagementSubnetId
        SecurityGroupIds: [ !Ref BOSHInitSecurityGroup ]
        UserData:
          Fn::Base64:
            !Join [ "", [
              "#!/bin/bash\n",

              "set -e -x\n",

              "export HOSTNAME=bosh-init\n",
              "export STACK_NAME=\"", !Ref "AWS::StackName", "\"\n",
              "export RESOURCE=BOSHInitInstance\n",
              "export REGION=\"", !Ref "AWS::Region", "\"\n",
              "export AWS_MUSINGS_S3_URL=\"", !Ref "AWSMusingsS3URL", "\"\n",

              "export EXTRA_PACKAGES=\"build-essential zlibc zlib1g-dev ruby ruby-dev openssl ",
                "libxslt-dev libxml2-dev libssl-dev libreadline6 libreadline6-dev libyaml-dev ",
                "libsqlite3-dev sqlite3 libpq-dev libmysqlclient-dev\"\n",

              "curl --output /tmp/bootstrap.sh --silent $AWS_MUSINGS_S3_URL/common/bootstrap.sh\n",
              "source /tmp/bootstrap.sh\n",
              "aws-bootstrap\n",

              "export AVAILABILITY_ZONE=\"", !Select [ "0", !GetAZs "" ], "\"\n",
              "export AWS_ACCESS_KEY_ID=\"", !Ref AWSAccessKeyId, "\"\n",
              "export AWS_SECRET_ACCESS_KEY=\"", !Ref AWSSecretAccessKey, "\"\n",
              "export MANAGEMENT_THREE_OCTET_CIDR_BLOCK=\"", !Ref ManagementThreeOctetCIDRBlock, "\"\n",
              "export BOSH_DIRECTOR_SECURITY_GROUP_ID=\"", !Ref BOSHDirectorSecurityGroupId, "\"\n",
              "export PRIVATE_KEY=\"", !Ref PrivateKey, "\"\n",
              "export STACK_PREFIX=\"", !Ref StackPrefix, "\"\n",
              "export SUBNET_ID=\"", !Ref ManagementSubnetId, "\"\n",

              "mkdir -p /usr/local/bosh-init\n",
              "cd /usr/local/bosh-init\n",

              "curl --output bosh.yml --silent $AWS_MUSINGS_S3_URL/bosh/bosh.yml\n",
              "sed -i -e \"s/AVAILABILITY_ZONE/$AVAILABILITY_ZONE/g\" bosh.yml\n",
              "sed -i -e \"s/AWS_ACCESS_KEY_ID/$AWS_ACCESS_KEY_ID/g\" bosh.yml\n",
              "sed -i -e \"s#AWS_SECRET_ACCESS_KEY#$AWS_SECRET_ACCESS_KEY#g\" bosh.yml\n",
              "sed -i -e \"s/BOSH_DIRECTOR_SECURITY_GROUP_ID/$BOSH_DIRECTOR_SECURITY_GROUP_ID/g\" bosh.yml\n",
              "sed -i -e \"s/MANAGEMENT_THREE_OCTET_CIDR_BLOCK/$MANAGEMENT_THREE_OCTET_CIDR_BLOCK/g\" bosh.yml\n",
              "sed -i -e \"s/REGION/$REGION/g\" bosh.yml\n",
              "sed -i -e \"s/STACK_PREFIX/$STACK_PREFIX/g\" bosh.yml\n",
              "sed -i -e \"s/SUBNET_ID/$SUBNET_ID/g\" bosh.yml\n",
              "echo \"$PRIVATE_KEY\" > bosh.pem\n",

              "curl --output bosh-init --silent ",
                "https://s3.amazonaws.com/bosh-init-artifacts/bosh-init-0.0.81-linux-amd64\n",
              "chmod +x bosh-init\n",

              "gem install bosh_cli --no-ri --no-rdoc\n",

              "curl --output /etc/init.d/bosh-init-run-once --silent $AWS_MUSINGS_S3_URL/bosh/bosh-init-run-once.sh\n",
              "chmod +x /etc/init.d/bosh-init-run-once\n",
              "sed -i -e \"s/STACK_NAME/$STACK_NAME/g\" /etc/init.d/bosh-init-run-once\n",
              "sed -i -e \"s/RESOURCE/$RESOURCE/g\" /etc/init.d/bosh-init-run-once\n",
              "sed -i -e \"s/REGION/$REGION/g\" /etc/init.d/bosh-init-run-once\n",
              "update-rc.d bosh-init-run-once defaults 99\n",

              "# Success (aws-signal-success) is signalled from the run-once script\n",
              "reboot\n"
            ] ]
      CreationPolicy:
        ResourceSignal:
          Timeout: PT40M

  Outputs:
    BOSHInitPrivateIPAddress:
      Description: The private IP address of the newly created bosh init server.
      Value: !GetAtt BOSHInitInstance.PrivateIp
