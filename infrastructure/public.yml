AWSTemplateFormatVersion: 2010-09-09

Description: The public resources of a VPC.

Parameters:
  AWSMusingsS3URL:
    Type: String
    Default: https://s3.amazonaws.com/aws-musings-us-east-1
    Description: S3 path to aws-musings.
  ExternalHostedZoneId:
    Type: String
    Description: |
      The external DNS zone to which external DNS records will be added. Optional, external records will be created
      if specified.
  FullyQualifiedExternalDNSZone:
    Type: String
    Description: The external DNS zone (should not start or end with .).
  FullyQualifiedInternalDNSZone:
    Type: String
    Description: The internal DNS zone (should not start or end with .).
  InternalAccessCIDRBlock:
    Type: String
    Description: The CIDR block that can access internal interfaces of public resources.
    Default: 10.0.0.0/8
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  InternalAccessIPv6CIDRBlock:
    Type: String
    Description: |
      The IPv6 CIDR block that can access internal interfaces of public resources. Optional, if not specified, no
      internal IPv6 access will be configured.
  InternalHostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: The internal DNS zone to which internal DNS records will be added.
  InternalKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: internal
    Description: SSH key name used to connect with internal servers.
  JumpBoxEIPAddress:
    Type: String
    Description: An EIP reserved for the jump box. Optional, a public IP address is reserved if not specified.
    AllowedPattern: "((\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3}))|(^$)"
    ConstraintDescription: must contain four dot-separated octets, optional
  JumpBoxKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: jump-box
    Description: SSH key name used to connect with the jump box.
  JumpBoxSSHCIDRIP:
    Type: String
    Description: Range of IP addresses that will be able to connect to the jump box via SSH.
  JumpBoxInstanceType:
    Type: String
    Default: t3.nano
    Description: The instance type of the jump box.
  PublicSubnetACIDRBlock:
    Type: String
    Description: The CIDR block of the public A subnet.
    Default: 10.0.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  PublicSubnetBCIDRBlock:
    Type: String
    Description: The CIDR block of the public B subnet.
    Default: 10.0.1.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  PublicSubnetCCIDRBlock:
    Type: String
    Description: The CIDR block of the public C subnet.
    Default: 10.0.2.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\\d{1,2}"
    ConstraintDescription: must contain four dot-separated octets, a slash, and the network mask bit count
  PublicSubnetAIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the public A subnet. Optional.
  PublicSubnetBIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the public B subnet. Optional.
  PublicSubnetCIPv6CIDRBlock:
    Type: String
    Description: The IPv6 CIDR block of the public C subnet. Optional.
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: The id of the VPC in which the resources will be created.
  VPNGatewayId:
    Type: String
    Description: |
      The VPN gateway to which route tables will be connected via route propagation. Optional, no propagation occurs
      if not specified.

Mappings:
  AMIRegionMap:
    # standard search: "ubuntu/images/hvm-ssd/ubuntu <year>" Root device type: ebs Virtualization type: hvm
    # nat search: "amzn-ami-vpc-nat-hvm-<year>" Root device type: ebs Virtualization type: hvm
    us-east-1: { standard: ami-b04847cf, nat: ami-980554e7 }
    us-west-2: { standard: ami-d7f1a8af, nat: ami-79eca201 }

Conditions:
  AddIPv6SubnetA: !Not [ !Equals [ !Ref PublicSubnetAIPv6CIDRBlock, "" ] ]
  AddIPv6SubnetB: !Not [ !Equals [ !Ref PublicSubnetBIPv6CIDRBlock, "" ] ]
  AddIPv6SubnetC: !Not [ !Equals [ !Ref PublicSubnetCIPv6CIDRBlock, "" ] ]
  AddAnyIPv6: !Or [ Condition: AddIPv6SubnetA, Condition: AddIPv6SubnetB, Condition: AddIPv6SubnetC ]
  AddIPv6InternalAccess: !Not [ !Equals [ !Ref InternalAccessIPv6CIDRBlock, "" ] ]
  VPNGatewayIdDefined: !Not [ !Equals [ !Ref VPNGatewayId, "" ] ]

Resources:
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetACIDRBlock
      AvailabilityZone: !Select [ "0", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetA, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetA, !Ref PublicSubnetAIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-a-public-subnet"
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetBCIDRBlock
      AvailabilityZone: !Select [ "1", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetB, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetB, !Ref PublicSubnetBIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-b-public-subnet"
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnetCCIDRBlock
      AvailabilityZone: !Select [ "2", !GetAZs "" ]
      VpcId: !Ref VPCId
      AssignIpv6AddressOnCreation: !If [ AddIPv6SubnetC, true, !Ref "AWS::NoValue" ]
      Ipv6CidrBlock: !If [ AddIPv6SubnetC, !Ref PublicSubnetCIPv6CIDRBlock, !Ref "AWS::NoValue" ]
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-c-public-subnet"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-igw"
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCId
      InternetGatewayId: !Ref InternetGateway

  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Condition: AddAnyIPv6
    Properties:
      VpcId: !Ref VPCId

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-public-rtb"
  IPv4PublicDefaultRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
    DependsOn: GatewayAttachment
  IPv6PublicDefaultRoute:
    Type: AWS::EC2::Route
    Condition: AddAnyIPv6
    Properties:
      DestinationIpv6CidrBlock: ::/0
      RouteTableId: !Ref PublicRouteTable
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway
    DependsOn: EgressOnlyInternetGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC

  VPNGatewayRoutePropagation:
    Type: AWS::EC2::VPNGatewayRoutePropagation
    Condition: VPNGatewayIdDefined
    Properties:
      RouteTableIds: [ !Ref PublicRouteTable ]
      VpnGatewayId: !Ref VPNGatewayId

  NetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-acl"

  IPv4EgressACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkACL
  IPv6EgressACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Condition: AddAnyIPv6
    Properties:
      Ipv6CidrBlock: ::/0
      Egress: true
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101
      NetworkAclId: !Ref NetworkACL
  IPv4IngressACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: false
      Protocol: -1
      RuleAction: allow
      RuleNumber: 100
      NetworkAclId: !Ref NetworkACL
  IPv6IngressACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Condition: AddAnyIPv6
    Properties:
      Ipv6CidrBlock: ::/0
      Egress: false
      Protocol: -1
      RuleAction: allow
      RuleNumber: 101
      NetworkAclId: !Ref NetworkACL

  PublicSubnetANetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PublicSubnetA
  PublicSubnetBNetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PublicSubnetB
  PublicSubnetCNetworkACLAssociation:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId: !Ref NetworkACL
      SubnetId: !Ref PublicSubnetC

  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: jump box security group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-jump-box-sg"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref JumpBoxSSHCIDRIP
      - IpProtocol: -1
        CidrIp: !Ref InternalAccessCIDRBlock
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIpv6: ::/0
  JumpBoxIPv6SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: AddIPv6InternalAccess
    Properties:
      GroupId: !GetAtt JumpBoxSecurityGroup.GroupId
      IpProtocol: -1
      CidrIpv6: !Ref InternalAccessIPv6CIDRBlock
  NATSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NAT server security group
      VpcId: !Ref VPCId
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-nat-sg"
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: !Ref InternalAccessCIDRBlock
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
      - IpProtocol: -1
        CidrIpv6: ::/0
  NATIPv6SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: AddIPv6InternalAccess
    Properties:
      GroupId: !GetAtt NATSecurityGroup.GroupId
      IpProtocol: -1
      CidrIpv6: !Ref InternalAccessIPv6CIDRBlock

  JumpBoxInstanceStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${AWSMusingsS3URL}/infrastructure/jump-box-instance.yml"
      Parameters:
        AWSMusingsS3URL: !Ref AWSMusingsS3URL
        EIPAddress: !Ref JumpBoxEIPAddress
        ExternalHostedZoneId: !Ref ExternalHostedZoneId
        FullyQualifiedExternalDNSZone: !Ref FullyQualifiedExternalDNSZone
        FullyQualifiedInternalDNSZone: !Ref FullyQualifiedInternalDNSZone
        ImageId: !FindInMap [ AMIRegionMap, !Ref "AWS::Region", standard ]
        InstanceType: !Ref JumpBoxInstanceType
        InternalHostedZoneId: !Ref InternalHostedZoneId
        KeyName: !Ref JumpBoxKeyName
        SecurityGroupId: !Ref JumpBoxSecurityGroup
        StackName: !Sub "${AWS::StackName}-jump-box"
        SubnetId: !Ref PublicSubnetA
  NATInstanceStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${AWSMusingsS3URL}/infrastructure/nat-instance.yml"
      Parameters:
        AWSMusingsS3URL: !Ref AWSMusingsS3URL
        FullyQualifiedInternalDNSZone: !Ref FullyQualifiedInternalDNSZone
        ImageId: !FindInMap [ AMIRegionMap, !Ref "AWS::Region", nat ]
        InternalHostedZoneId: !Ref InternalHostedZoneId
        KeyName: !Ref InternalKeyName
        SecurityGroupId: !Ref NATSecurityGroup
        StackName: !Sub "${AWS::StackName}-nat"
        SubnetId: !Ref PublicSubnetB

Outputs:
  JumpBoxPublicIPAddress:
    Description: The public IP address of the newly created jump box.
    Value: !GetAtt JumpBoxInstanceStack.Outputs.JumpBoxPublicIPAddress
  NetworkACLId:
    Description: The id of the network access control list used to protect instances in the VPC.
    Value: !Ref NetworkACL
  NATInstanceId:
    Description: The id of the NAT instance to be added to private route tables.
    Value: !GetAtt NATInstanceStack.Outputs.NATInstanceId
  EgressOnlyInternetGatewayId:
    Condition: AddAnyIPv6
    Description: The id of the egress-only internet gateway for IPv6 traffic.
    Value: !Ref EgressOnlyInternetGateway
  PublicRouteTableId:
    Description: The id of the public route table.
    Value: !Ref PublicRouteTable
